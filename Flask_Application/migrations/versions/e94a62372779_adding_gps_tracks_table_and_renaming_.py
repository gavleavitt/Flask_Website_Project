"""Adding gps tracks table and renaming gps data table

Revision ID: e94a62372779
Revises: d3d1fb1c95f4
Create Date: 2020-06-26 20:34:18.309552

"""
import geoalchemy2
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e94a62372779'
down_revision = 'd3d1fb1c95f4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gpsapidata',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lat', sa.Float(), nullable=True),
    sa.Column('lon', sa.Float(), nullable=True),
    sa.Column('satellites', sa.Integer(), nullable=True),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('speed', sa.Float(), nullable=True),
    sa.Column('accuracy', sa.Float(), nullable=True),
    sa.Column('direction', sa.Integer(), nullable=True),
    sa.Column('provider', sa.String(length=30), nullable=True),
    sa.Column('timestamp_epoch', sa.DateTime(), nullable=True),
    sa.Column('timeutc', sa.DateTime(), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('startstamp', sa.DateTime(), nullable=True),
    sa.Column('battery', sa.Integer(), nullable=True),
    sa.Column('androidid', sa.String(length=30), nullable=True),
    sa.Column('serial', sa.String(length=30), nullable=True),
    sa.Column('profile', sa.String(length=30), nullable=True),
    sa.Column('hhop', sa.Float(), nullable=True),
    sa.Column('vdop', sa.Float(), nullable=True),
    sa.Column('pdop', sa.Float(), nullable=True),
    sa.Column('activity', sa.String(length=30), nullable=True),
    sa.Column('travelled', sa.Float(), nullable=True),
    sa.Column('nearestroad', sa.String(length=30), nullable=True),
    sa.Column('dist_nearestroad', sa.Float(), nullable=True),
    sa.Column('nearesttrail', sa.String(length=30), nullable=True),
    sa.Column('dist_nearesttrail', sa.Float(), nullable=True),
    sa.Column('POI', sa.String(length=30), nullable=True),
    sa.Column('city', sa.String(length=30), nullable=True),
    sa.Column('county', sa.String(length=30), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gpstracks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp_epoch', sa.DateTime(), nullable=True),
    sa.Column('timeutc', sa.DateTime(), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('startstamp', sa.DateTime(), nullable=True),
    sa.Column('gpsid', sa.Integer(), nullable=True),
    sa.Column('androidid', sa.String(length=30), nullable=True),
    sa.Column('serial', sa.String(length=30), nullable=True),
    sa.Column('profile', sa.String(length=30), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    #op.drop_table('gpsapidattest')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('gpsapidattest',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('lat', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('lon', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('satellites', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('altitude', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('speed', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('accuracy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('direction', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('provider', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('timestamp_epoch', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('timeutc', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    # sa.Column('startstamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('battery', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('androidid', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('serial', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('profile', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('hhop', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('vdop', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('pdop', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('activity', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('travelled', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('POI', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('city', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('county', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('dist_nearestroad', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('dist_nearesttrail', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True),
    # sa.Column('nearestroad', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.Column('nearesttrail', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='gpsapidattest_pkey')
    # )
    op.drop_table('gpstracks')
    op.drop_table('gpsapidata')
    # ### end Alembic commands ###
