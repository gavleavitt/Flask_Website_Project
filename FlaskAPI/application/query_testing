#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 22 16:24:43 2020

@author: user
"""

#from application import application, models, db
#from models import gpsdatmodel, gpstracks, POI, CaliforniaPlaces, CACounty, waterQuality, waterQualityMD5, beaches
#from application import functions as func
#from application import script_config as dbconfig
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text, distinct, create_engine, or_, Column, String, Integer, Date, Boolean, ForeignKey
#from application.models import gpsdatmodel as gpsdat
from sqlalchemy import func as sqlfunc
from datetime import datetime
from flask.json import jsonify
from geojson import Point, Feature, FeatureCollection, LineString
# from geoalchemy2.shape import to_shape
from sqlalchemy.orm import sessionmaker, relationship
import script_config as dbconfig
from sqlalchemy.ext.declarative import declarative_base

dbcon = dbconfig.dbcon
engine = create_engine(dbcon)
Session = sessionmaker(bind=engine)
session = Session()
Base = declarative_base()

class beaches(Base):
    __tablename__ = 'Beaches'

    id = Column(Integer, primary_key=True)
    BeachName = Column(String)

class waterQualityMD5(Base):
    __tablename__ = 'water_qual_md5'

    id = Column(Integer, primary_key=True)
    pdfdate = Column(Date)
    insdate = Column(Date)
    md5 = Column(String)
    pdfName = Column(String)


class stateStandards(Base):
    __tablename__ = "StateStandards"

    id = Column(Integer, primary_key=True)
    Name = Column(String)
    StandardMPN = Column(String)

class waterQuality(Base):
    __tablename__ = "Water_Quality"

    id = Column(Integer, primary_key=True)
    TotColi = Column(Integer)
    FecColi = Column(Integer)
    Entero = Column(Integer)
    ExceedsRatio = Column(String)
    BeachStatus = Column(String)
    beach_id = Column(Integer, ForeignKey("Beaches.id"))
    md5_id = Column(Integer, ForeignKey("water_qual_md5.id"))
    resample = Column(String)

    beach_rel = relationship(beaches, backref="Water_Quality")
    hash_rel = relationship(waterQualityMD5, backref="Water_Quality")



def getwaterqual():
    records = session.query(distinct(waterQuality.md5_id)) \
        .join(beaches) \
        .join() \
        .order_by(waterQualityMD5.insdate)